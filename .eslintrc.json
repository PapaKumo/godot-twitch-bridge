{
	"env": {
		"browser": true
	},
	"extends": ["eslint:recommended", "plugin:jest/recommended"],
	"parser": "@typescript-eslint/parser",
	"overrides": [
		{
			"files": ["*.ts", "*.tsx"],
			// Extend TypeScript plugins here, instead of extending them outside the `overrides`.
			"extends": [
				"plugin:@typescript-eslint/recommended",
				"plugin:@typescript-eslint/recommended-requiring-type-checking"
			],

			"parserOptions": {
				"project": ["./tsconfig.json"], // Specify it only for TypeScript files
				"sourceType": "module"
			},
			"rules": {
				"@typescript-eslint/explicit-module-boundary-types": "off",
				"@typescript-eslint/adjacent-overload-signatures": "error",
				"@typescript-eslint/array-type": [
					"error",
					{
						"default": "array"
					}
				],
				"@typescript-eslint/await-thenable": "off",
				"@typescript-eslint/ban-types": [
					"error",
					{
						"types": {
							"Object": {
								"message": "Avoid using the `Object` type. Did you mean `object`?"
							},
							"Function": {
								"message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
							},
							"Boolean": {
								"message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
							},
							"Number": {
								"message": "Avoid using the `Number` type. Did you mean `number`?"
							},
							"String": {
								"message": "Avoid using the `String` type. Did you mean `string`?"
							},
							"Symbol": {
								"message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
							}
						}
					}
				],
				"@typescript-eslint/consistent-type-assertions": "error",
				"@typescript-eslint/dot-notation": "error",
				"@typescript-eslint/indent": ["error", "tab"],
				"@typescript-eslint/member-delimiter-style": [
					"error",
					{
						"multiline": {
							"delimiter": "semi",
							"requireLast": true
						},
						"singleline": {
							"delimiter": "semi",
							"requireLast": false
						}
					}
				],
				"@typescript-eslint/naming-convention": [
					"error",
					{
						"selector": "default",
						"format": ["strictCamelCase", "StrictPascalCase"],
						"leadingUnderscore": "allow",
						"trailingUnderscore": "allow"
					},
					{
						"selector": "variable",
						"format": ["strictCamelCase", "UPPER_CASE", "StrictPascalCase"],
						"leadingUnderscore": "allow",
						"trailingUnderscore": "allow"
					},
					{
						"selector": "typeLike",
						"format": ["StrictPascalCase"]
					},
					{
						"selector": ["parameter"],
						"modifiers": ["unused"],
						"format": ["strictCamelCase", "StrictPascalCase"],
						"leadingUnderscore": "require"
					}
				],
				"@typescript-eslint/no-empty-function": "error",
				"@typescript-eslint/no-empty-interface": "error",
				"@typescript-eslint/no-explicit-any": "off",
				"@typescript-eslint/no-misused-new": "error",
				"@typescript-eslint/no-namespace": "error",
				"@typescript-eslint/no-parameter-properties": "off",
				"@typescript-eslint/no-shadow": [
					"error",
					{
						"hoist": "all"
					}
				],
				"@typescript-eslint/no-unused-expressions": "error",
				"@typescript-eslint/no-use-before-define": "off",
				"@typescript-eslint/no-var-requires": "error",
				"@typescript-eslint/prefer-for-of": "error",
				"@typescript-eslint/prefer-function-type": "error",
				"@typescript-eslint/prefer-namespace-keyword": "error",
				"@typescript-eslint/quotes": "off",
				"@typescript-eslint/semi": ["error", "always"],
				"@typescript-eslint/triple-slash-reference": [
					"error",
					{
						"path": "always",
						"types": "prefer-import",
						"lib": "always"
					}
				],
				"@typescript-eslint/type-annotation-spacing": "off",
				"@typescript-eslint/unified-signatures": "error"
			}
		}
	],
	"plugins": ["eslint-plugin-jsdoc", "@typescript-eslint"],
	"rules": {
		"arrow-parens": ["off", "always"],
		"brace-style": ["off", "off"],
		"comma-dangle": "off",
		"complexity": "off",
		"constructor-super": "error",
		"curly": "error",
		"eol-last": "off",
		"eqeqeq": ["error", "smart"],
		"guard-for-in": "error",
		"id-blacklist": [
			"error",
			"any",
			"Number",
			"number",
			"String",
			"string",
			"Boolean",
			"boolean",
			"Undefined",
			"undefined"
		],
		"id-match": "error",
		"jsdoc/check-alignment": "error",
		"jsdoc/check-indentation": "error",
		"jsdoc/newline-after-description": "error",
		"linebreak-style": "off",
		"max-classes-per-file": ["error", 1],
		"max-len": "off",
		"new-parens": "off",
		"newline-per-chained-call": "off",
		"no-bitwise": "off",
		"no-caller": "error",
		"no-cond-assign": "error",
		"no-console": "off",
		"no-debugger": "error",
		"no-empty": "error",
		"no-eval": "error",
		"no-extra-semi": "off",
		"no-fallthrough": "off",
		"no-invalid-this": "off",
		"no-irregular-whitespace": "off",
		"no-multiple-empty-lines": "error",
		"no-new-wrappers": "error",
		"no-throw-literal": "error",
		"no-trailing-spaces": "error",
		"no-undef-init": "error",
		"no-underscore-dangle": "error",
		"no-unsafe-finally": "error",
		"no-unused-labels": "error",
		"no-var": "off",
		"object-shorthand": "error",
		"one-var": ["error", "never"],
		"prefer-const": "error",
		"quote-props": "off",
		"radix": "off",
		"space-before-function-paren": "off",
		"space-in-parens": ["off", "never"],
		"spaced-comment": [
			"error",
			"always",
			{
				"markers": ["/"]
			}
		],
		"use-isnan": "error",
		"valid-typeof": "off"
	}
}
